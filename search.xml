<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux kernel编译记录</title>
    <url>/2021/10/10/Linux-kernel/</url>
    <content><![CDATA[<blockquote>
<p>本文参考了<a href="https://linux.cn/article-9665-1.html">如何编译 Linux 内核</a></p>
</blockquote>
<h1 id="开始踩坑"><a href="#开始踩坑" class="headerlink" title="开始踩坑"></a>开始踩坑</h1><blockquote>
<p>编译的内核版本为5.14.9，且Linux发行版为Ubuntu 20.04.3 LTS</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装ssh服务"><a href="#安装ssh服务" class="headerlink" title="安装ssh服务"></a>安装ssh服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ps -e |grep ssh //查看是否有安装ssh服务</span><br><span class="line">sudo apt-get update //更新资源列表</span><br><span class="line">sudo apt-get install openssh-server //安装</span><br><span class="line">udo ps -e |grep ssh //再次查看是否安装成功</span><br><span class="line">ifconfig //查ip</span><br></pre></td></tr></table></figure>

<h3 id="下载内核源码"><a href="#下载内核源码" class="headerlink" title="下载内核源码"></a>下载内核源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.9.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison</span><br></pre></td></tr></table></figure>

<h3 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar xvJf linux-5.14.9.tar.xz //先用cp命令拷贝到usr/src/再解压</span><br></pre></td></tr></table></figure>

<h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h2><blockquote>
<p>以下的命令不出意外都需要在前面加<code>sudo</code></p>
</blockquote>
<p>首先必须配置需要包含哪些模块。实际上，有一些非常简单的方式来配置。使用一个命令，你能拷贝当前内核的配置文件，然后使用可靠的 <code>menuconfig</code> 命令来做任何必要的更改。使用如下命令来完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /boot/config-$(uname -r) .config</span><br></pre></td></tr></table></figure>

<p>有一个配置文件了，输入命令 <code>make menuconfig</code>。该命令将打开一个配置工具（图 1），它可以让你遍历每个可用模块，然后启用或者禁用你需要或者不需要的模块。</p>
<blockquote>
<p>我个人是直接进去配置界面然后exit的，估计这样就直接采用拷贝过来的配置文件了，下面的<code>make</code>命令就不需要选择一堆问题了</p>
</blockquote>
<blockquote>
<p><em><strong><u><a href="#%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95">建议先看看下面的坑</a>,看完可以省事！</u></strong></em></p>
</blockquote>
<h3 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h3><p>这里需要的时间是最多的，我给了8g内存给虚拟机，cpu占用59%，最后跑了55分钟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo time make -jn //最好在前面加time,统计一下时间</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/zl3090/article/details/89303583?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&spm=1001.2101.3001.4242">这里贴一下网上搜到的对-jn的理解</a>，总结来说就是n一般是cpu核心数量的两倍</p>
</blockquote>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/%E6%88%AA%E5%B1%8F2021-10-07%20%E4%B8%8A%E5%8D%8812.20.03.png"></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/%E6%88%AA%E5%B1%8F2021-10-07%20%E4%B8%8A%E5%8D%882.03.48.png"></p>
<blockquote>
<p>最好在这里弄个快照，这样安装完内核重启之后出问题了还能退回这一步</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make modules_install // 安装那些之前启用的模块</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/%E6%88%AA%E5%B1%8F2021-10-07%20%E4%B8%8A%E5%8D%882.09.09.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install //安装内核</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/%E6%88%AA%E5%B1%8F2021-10-07%20%E4%B8%8A%E5%8D%882.10.31.png"></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/%E6%88%AA%E5%B1%8F2021-10-07%20%E4%B8%8A%E5%8D%882.12.30.png"></p>
<h2 id="启动内核作为引导"><a href="#启动内核作为引导" class="headerlink" title="启动内核作为引导"></a>启动内核作为引导</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -c -k 5.14.9</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<p>然后就可以重启系统了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line">uname -r //重启完可以用这个看看当前内核</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看完本文觉得有帮助的可以去本人的GitHub点个follow哇，说不定还有下一次作业呢</p>
</blockquote>
<h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><h2 id="make的时候提示debian-canonical-certs-pem"><a href="#make的时候提示debian-canonical-certs-pem" class="headerlink" title="make的时候提示debian/canonical-certs.pem"></a>make的时候提示debian/canonical-certs.pem</h2><blockquote>
<p>没有规则可制作目标“debian/canonical-certs.pem”，由“certs/x509_certificate_list” 需求。 停止。<br>[Makefile:1858：certs] 错误 2</p>
</blockquote>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211010225345232.png"></p>
<p>这个坑可以用下面这个方法解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .config</span><br></pre></td></tr></table></figure>

<p>然后在vim的正常模式下直接输入<code>/debian</code>然后回车就能定位到这个字符串上，把该字符串的值改为空</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211010225809246.png"></p>
<p>然后用<code>:w !sudo tee %</code>强行保存修改，最后<code>:q!</code>就好了</p>
<h2 id="make次数过多导致No-space-left-on-device"><a href="#make次数过多导致No-space-left-on-device" class="headerlink" title="make次数过多导致No space left on device"></a>make次数过多导致No space left on device</h2><blockquote>
<p>嗨呀，这个问题的根本原因就是虚拟机空间给少了，下面的方法只能缓解一下，建议扩容</p>
<p><a href="https://blog.csdn.net/orange_612/article/details/79597905">这里是网上搜的扩容教程</a>，没实践过，请自行操作</p>
</blockquote>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211010230837626.png"></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211010230904891.png"></p>
<blockquote>
<p>通过这个文章解决的<a href="https://www.cnblogs.com/kaishirenshi/p/11343983.html">https://www.cnblogs.com/kaishirenshi/p/11343983.html</a></p>
<p>**<u>/dev/mapper/是挂载在Linux的根目录的（Mounted on /）</u>**，所以不是Ubuntu的如果是这个路径出问题的，<del>应该也是这样解决吧</del></p>
</blockquote>
<h3 id="可以清理一下-dev-loop"><a href="#可以清理一下-dev-loop" class="headerlink" title="可以清理一下/dev/loop*"></a>可以清理一下/dev/loop*</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove --purge snapd</span><br></pre></td></tr></table></figure>



<h3 id="可以直接扩容"><a href="#可以直接扩容" class="headerlink" title="可以直接扩容"></a>可以直接扩容</h3><p>给ubuntu–vg-ubuntu–lv扩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvresize -A n -L +20G /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line">resize2fs -p /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></pre></td></tr></table></figure>

<h3 id="也可以删文件解决"><a href="#也可以删文件解决" class="headerlink" title="也可以删文件解决"></a>也可以删文件解决</h3><p>首先<code>cd /</code>到根目录，然后<code>sudo  du -h -x --max-depth=1</code>就能找到下一级目录哪个文件夹，这样一级级找下去，在本文的范围内，不出意外应该是<code>/usr/src/</code>里的那个源码文件夹最大了，所以要不就给虚拟机更多空间，要不就从头开始，直接一开始就把<code>debian/canonical-certs.pem</code>删掉，这样就能一次通过<code>make</code>了，<del>大概</del></p>
<p>先<code>cd /usr/src/</code>，再rm掉源码文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf linux-5.14.9//换成自己的文件夹名字</span><br></pre></td></tr></table></figure>

<p>然后再<code>cd /</code>，执行<code>df -h</code>，这时候占用应该就正常了</p>
<h2 id="完结撒花🎉"><a href="#完结撒花🎉" class="headerlink" title="完结撒花🎉"></a>完结撒花🎉</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用命令</title>
    <url>/2021/09/14/git/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暑假的时候看了<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰</a>写的git使用教程，这学期要频繁使用，所以特地记录下来。</p>
<p>基本就是从廖雪峰的网站里摘抄的，供自己翻阅。</p>
<h1 id="命令使用技巧"><a href="#命令使用技巧" class="headerlink" title="命令使用技巧"></a>命令使用技巧</h1><h2 id="1-创建Git仓库"><a href="#1-创建Git仓库" class="headerlink" title="1.创建Git仓库"></a>1.创建Git仓库</h2><p>​        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init //初始化Git仓库</span><br><span class="line">git add //添加文件进Git仓库</span><br><span class="line">git commit -m //提交文件到仓库</span><br><span class="line">git add --all //把所有文件添加进仓库</span><br></pre></td></tr></table></figure>



<h2 id="2-时光机穿梭"><a href="#2-时光机穿梭" class="headerlink" title="2.时光机穿梭"></a>2.时光机穿梭</h2><p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/jeOUv6.png" alt="add 和 commit"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log //查看提交日志</span><br><span class="line">git reset --hard //回退到对应版本号</span><br><span class="line">git reflog //查看每一次命令，可以查看回退前的版本号</span><br><span class="line">git status //查看仓库状态</span><br><span class="line">git diff HEAD -- //可以看工作区和版本库里面最新版本的区别</span><br><span class="line">git checkout -- //回退到最近一次commit或add的状态，即用版本库里的替换工作区的版本</span><br><span class="line">git reset HEAD //如果添加到了暂存区，先reset再checkout</span><br><span class="line">git rm //删除文件</span><br></pre></td></tr></table></figure>

<h2 id="3-远程库"><a href="#3-远程库" class="headerlink" title="3.远程库"></a>3.远程库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git //关联远程库</span><br><span class="line">git push -u origin master //第一次推送master分支的内容</span><br><span class="line">git push origin master //推送最新修改</span><br><span class="line">git clone //克隆仓库</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/4p7A1R.png" alt="同时关联gitee和github"></p>
<h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h2><p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/SIZDdg.png" alt="多人协作"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch //查看分支</span><br><span class="line">git branch &lt;name&gt; //创建分支</span><br><span class="line">git checkout &lt;name&gt;或者git switch &lt;name&gt; //切换分支</span><br><span class="line">git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt; //创建加切换分支</span><br><span class="line">git merge &lt;name&gt; //合并某分支到当前分支</span><br><span class="line">git branch -d &lt;name&gt; //删除某分支</span><br><span class="line">git log --graph //查看分支合并图</span><br><span class="line">git stash //暂时储藏当前工作区</span><br><span class="line">git stash apply //恢复stash内容，不删除</span><br><span class="line">git stash pop //恢复且删除</span><br><span class="line">git remote -v //查看远程库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5.标签管理"></a>5.标签管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt; &lt;commit id&gt;//新建标签，默认为HEAD</span><br><span class="line">git log --pretty=oneline --abbrev-commit //查看commit id</span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot; //可以指定标签信息</span><br><span class="line">git tag //查看所有标签</span><br><span class="line">git show &lt;tagname&gt; //可以看标签信息</span><br><span class="line">git tag -d &lt;tagname&gt; //删除标签</span><br><span class="line">git push origin &lt;tagname&gt; //可以推送一个本地标签；</span><br><span class="line">git push origin --tags //可以推送全部未推送过的本地标签；</span><br><span class="line">git tag -d &lt;tagname&gt; //可以删除一个本地标签；</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt; //可以删除一个远程标签。</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>使用技巧</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>花束般的恋爱观后有感</title>
    <url>/2021/09/16/huashu/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4fbdeece7c77218faac67f6089ab80ab91fb035d469bd5004bcc20148411cd85"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">私人感情就隐藏起来吧,有兴趣可以私聊我拿密码hhhhh。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>感想</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>FineWeather开发记录</title>
    <url>/2021/10/17/weather/</url>
    <content><![CDATA[<h1 id="FineWeather开坑记录"><a href="#FineWeather开坑记录" class="headerlink" title="FineWeather开坑记录"></a>FineWeather开坑记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>九月份看完了郭霖大神的第一行代码，然后跟着书里的实战敲了一个天气app，但是感觉过于简陋，考虑到天气能锻炼到地方还挺多，于是打算自己开个坑。因为本人是美化爱好者，难得可以自己开发一个app，那本app自然是界面不能丑了，<del>在保证实用性的基础上我会大力加点花里胡哨的东西</del>。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>既然注册了彩云app的账号，那既然还是用这个api啦，提供的数据也足够用了。还要搜集插图，设计界面。</p>
<h2 id="TODO（画饼）"><a href="#TODO（画饼）" class="headerlink" title="TODO（画饼）"></a>TODO（画饼）</h2><ul>
<li><input disabled="" type="checkbox"> 画launcher icon</li>
<li><input disabled="" type="checkbox"> 搜集插图</li>
<li><input disabled="" type="checkbox"> 设计界面</li>
<li><input disabled="" type="checkbox"> 完成基础功能</li>
<li><input disabled="" type="checkbox"> 优化好暗色模式</li>
<li><input disabled="" type="checkbox"> 升级动效</li>
<li><input disabled="" type="checkbox"> 待定</li>
</ul>
<h2 id="开坑"><a href="#开坑" class="headerlink" title="开坑"></a>开坑</h2><blockquote>
<p><a href="https://github.com/lnm011223/FIneWeather/tree/master">GitHub项目地址</a>：可以来提issue哇</p>
</blockquote>
<h3 id="第一次失败"><a href="#第一次失败" class="headerlink" title="第一次失败"></a>第一次失败</h3><p>本来在dribble找了个挺好看的设计的，但是在GitHub上找到的shadow库全都用不了，就勉强用material design硬上了，然后发现好多东西都不会改，于是第一版设计结束了。泪目，丢个图纪念一下。属实是差别有点大。</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211020133316854.png"></p>
<h3 id="记录一个小技巧"><a href="#记录一个小技巧" class="headerlink" title="记录一个小技巧"></a>记录一个小技巧</h3><p>先放个效果图</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211025210534105.png" alt="demo"></p>
<p>解释一下原理：</p>
<p>先创建一个buttom appbar，然后在这个部件里嵌入一个buttomnavigation，再把buttomnavigation的右边边距设置在fab的左边，就能做出这个效果。这样就可以同时拥有fab和navigation的特性</p>
<p>下面是示例代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/coordinator&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#235fd9&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.bottomappbar.BottomAppBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottomAppBar&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:backgroundTint</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;@style/Widget.MaterialComponents.BottomAppBar.Colored&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:contentInsetEnd</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:contentInsetStart</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fabAlignmentMode</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:elevation</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottomNavigation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:backgroundTint</span>=<span class="string">&quot;@android:color/transparent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:elevation</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemIconTint</span>=<span class="string">&quot;#585342&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemRippleColor</span>=<span class="string">&quot;?attr/colorOnSurface&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemTextColor</span>=<span class="string">&quot;#585342&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:labelVisibilityMode</span>=<span class="string">&quot;selected&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:menu</span>=<span class="string">&quot;@menu/navigation&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">android:elevation</span>=<span class="string">&quot;0dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.bottomappbar.BottomAppBar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fab&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:backgroundTint</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:contentDescription</span>=<span class="string">&quot;@string/todo&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_baseline_add_24&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:elevation</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:tint</span>=<span class="string">&quot;#585342&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_anchor</span>=<span class="string">&quot;@id/bottomAppBar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用和进程通信踩坑记录</title>
    <url>/2021/11/20/Linux-system/</url>
    <content><![CDATA[<blockquote>
<p>本篇博客参考了dzcgiegie的好文啦：<a href="https://dzcgood.xyz/2021/11/15/SystemCall_ProcessCommunication/">系统调用与进程通信</a></p>
</blockquote>
<hr>
<h2 id="3-1-Linux-之系统调用"><a href="#3-1-Linux-之系统调用" class="headerlink" title="3.1 Linux 之系统调用"></a>3.1 Linux 之系统调用</h2><blockquote>
<p>任务描述：通过对作业二形成的系统新内核进行相应的修改，加入自己的系 统调用，并且在应用层编写一应用程序对其进行调用，产生相应的输出给予验证。</p>
</blockquote>
<p><del>作为一个懒人，那肯定要省时间的方法啊，谁会再去等至少一个小时的内核编译时间啊</del></p>
<h3 id="1-查询-sys-call-table-的地址"><a href="#1-查询-sys-call-table-的地址" class="headerlink" title="1.查询 sys_call_table 的地址"></a>1.查询 sys_call_table 的地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /proc/kallsyms | grep sys_call_table</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121000419205.png"></p>
<p>找到sys_call_table 的地址为<strong>0xffffffff91a013a0</strong></p>
<h3 id="2-查询可用的系统调用号"><a href="#2-查询可用的系统调用号" class="headerlink" title="2.查询可用的系统调用号"></a>2.查询可用的系统调用号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /usr/include/asm-generic/unistd.h</span><br></pre></td></tr></table></figure>

<p>这里我是这个路径，其他人好像不是，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -name unistd*.h</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121094548170.png"></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121094955823.png"></p>
<p>反正找到这个<code>unistd</code>文件就行，然后看一下哪个号没被占用</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121001129248.png"></p>
<p>找到<u><strong>415号</strong></u>是可用的系统调用号</p>
<h3 id="3-创建lnm-c文件"><a href="#3-创建lnm-c文件" class="headerlink" title="3.创建lnm.c文件"></a>3.创建lnm.c文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim lnm.c</span><br></pre></td></tr></table></figure>

<p>在文件内定义系统调用，其中使用到的 sys_call_table 地址和可用系统调用号为上面找到的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line">MODULE_INFO(intree,<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;LNM&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_CALL_TABLE_ADDRESS 0xffffffff91a013a0  <span class="comment">//sys_call_table对应的地址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 415  <span class="comment">//系统调用号为415</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">&quot;Welcome !  20192131031+liangnuoming\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   printk(KERN_INFO <span class="string">&quot;Bye !  20192131031+liangnuoming\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-创建Makefile调用文件"><a href="#4-创建Makefile调用文件" class="headerlink" title="4.创建Makefile调用文件"></a>4.创建Makefile调用文件</h3><p>先运行下面的命令找到系统当前的内核，然后去/usr/src/目录找对应的文件夹，记住这个文件夹的路径<code>/usr/src/linux-headers-5.4.0-88-generic</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname  -a</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121004215247.png"></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121004446744.png"></p>
<p>然后创建Makefile文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim Makefile</span><br></pre></td></tr></table></figure>

<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=lnm.o</span></span><br><span class="line">CURRENT_PATH:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINUX_KERNEL_PATH:=/usr/src/linux-headers-5.4.0-88-generic</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">        make -C  <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        make -C  <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> clean</span><br></pre></td></tr></table></figure>

<h3 id="5-安装内核模块"><a href="#5-安装内核模块" class="headerlink" title="5.安装内核模块"></a>5.安装内核模块</h3><p>执行<code>sudo make</code><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121011135879.png"></p>
<p>可以通过<code>ls | grep ‘lnm.*’</code>查看执行是否成功</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121011002126.png"></p>
<p>使用如下命令插入模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo insmod lnm.ko</span><br></pre></td></tr></table></figure>

<p>使用如下命令检查插入是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121011434782.png"></p>
<p>可以看到<strong>lnm</strong>的模块，插入成功。</p>
<h3 id="6-创建test-c调用文件"><a href="#6-创建test-c调用文件" class="headerlink" title="6.创建test.c调用文件"></a>6.创建test.c调用文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim test.c</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">unsigned</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">        x = syscall(<span class="number">415</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;调用测试成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 <code>gcc test.c</code> 和 <code>./a.out</code> 命名查看运行结果：</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121012942991.png"></p>
<p>通过 <code>dmesg</code> 命令查看系统调用的结果：</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121013038067.png"></p>
<p><strong>说明添加系统调用成功</strong></p>
<h2 id="3-2-IPC"><a href="#3-2-IPC" class="headerlink" title="3.2 IPC"></a>3.2 IPC</h2><h3 id="代码实践-1："><a href="#代码实践-1：" class="headerlink" title="代码实践 1："></a>代码实践 1：</h3><blockquote>
<p>本人在学者网的课程主页中上传了相关 Slides（教学资源里名 为“Linux-OS.zip“的压缩包），其第 12、13 章对上述四种 IPC 方式的使用过程和 示范代码进行了详细的解释。所以这里就请大家先根据上述压缩包里的教程，把 四种 IPC 方式的代码在自己的虚拟机里正确的运行起来并仔细理解。因为这些隶 属于应用层代码，所以难度较低。</p>
</blockquote>
<p>若是执行gcc以后报错，可以用man + 函数名 命令解决该头文件缺失的问题</p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121015027022.png"></p>
<p>例如<code>man fork</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121015239484.png"></p>
<h4 id="管道-PIPE"><a href="#管道-PIPE" class="headerlink" title="管道 - PIPE"></a>管道 - PIPE</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim pipe.c</span><br></pre></td></tr></table></figure>

<p>创建 pipe.c 文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1,fd[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//定义读缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> outpipe[<span class="number">50</span>];</span><br><span class="line">    <span class="comment">//定义写缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> inpipe[<span class="number">50</span>];</span><br><span class="line">    <span class="comment">//创建无名管道fd</span></span><br><span class="line">    pipe(fd);</span><br><span class="line">    <span class="keyword">while</span>((p1 = fork()) == <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//子进程返回</span></span><br><span class="line">    <span class="keyword">if</span>(p1 == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(inpipe, <span class="string">&quot;This is a message!&quot;</span>);</span><br><span class="line">        <span class="comment">//写信息到管道</span></span><br><span class="line">        write(fd[<span class="number">1</span>], inpipe, <span class="number">50</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//父进程返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//等待子进程终止</span></span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//从管道读信息到缓冲区</span></span><br><span class="line">        read(fd[<span class="number">0</span>], outpipe, <span class="number">50</span>);</span><br><span class="line">        <span class="comment">//显示读到的信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,outpipe);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>sudo gcc pipe.c -o pipe</code>和<code>./pipe</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121015507060.png"></p>
<h4 id="信号-Signal"><a href="#信号-Signal" class="headerlink" title="信号 - Signal"></a>信号 - Signal</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim signal.c</span><br></pre></td></tr></table></figure>

<p>创建 signal.c 文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">int_func</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        k=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;int_func\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        signal(SIGINT,int_func);</span><br><span class="line">        k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;Hello!20192131031 + liangnuoming\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行<code>sudo gcc signal.c -o signal</code>和<code>./signal</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121020231298.png"></p>
<h4 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim sndfile.c</span><br></pre></td></tr></table></figure>

<p>创建 sndfile.c文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXMSG 512</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span> //定义消息缓冲区数据结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> my_msg_type;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> some_text[MAXMSG];</span><br><span class="line">&#125; msg;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msgid;                            <span class="comment">//定义消息缓冲区内部标识</span></span><br><span class="line">    <span class="keyword">char</span> buffer[BUFSIZ];                  <span class="comment">//定义用户缓冲区</span></span><br><span class="line">    msgid = msgget(<span class="number">12</span>,<span class="number">0666</span> | IPC_CREAT); <span class="comment">//创建消息队列， key为12</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Enter some text:&quot;</span>);     <span class="comment">//提示键入消息内存</span></span><br><span class="line">        fgets(buffer, BUFSIZ, <span class="built_in">stdin</span>); <span class="comment">//标准输入送buffer</span></span><br><span class="line">        msg.i++ ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>,msg.i);</span><br><span class="line">        msg.my_msg_type = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(msg.some_text, buffer);             <span class="comment">//buffer中的内容送消息缓冲</span></span><br><span class="line">        msgsnd(msgid, &amp;msg, MAXMSG, <span class="number">0</span>);            <span class="comment">//发送消息到消息队列</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(msg.some_text, <span class="string">&quot;end&quot;</span>, <span class="number">3</span>) == <span class="number">0</span>) <span class="comment">//消息为end结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim rcvfile.c</span><br></pre></td></tr></table></figure>

<p>创建 rcvfile.c文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXMSG 512</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span>//定义消息缓冲区数据结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">int</span> my_msg_type;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">char</span> some_text[MAXMSG];</span><br><span class="line">&#125;msg;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> msgid;</span><br><span class="line">	msg.my_msg_type=<span class="number">3</span>;</span><br><span class="line">	msgid=msgget(<span class="number">12</span>,<span class="number">0666</span>|IPC_CREAT);<span class="comment">//获取消息队列。Key为1234</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		msgrcv(msgid,&amp;msg,BUFSIZ,msg.my_msg_type,<span class="number">0</span>);<span class="comment">//接收消息</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;You wrote:%s and i = %d\n&quot;</span>,msg.some_text,msg.i);<span class="comment">//显示消息</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strncmp</span>(msg.some_text,<span class="string">&quot;end&quot;</span>,<span class="number">3</span>)==<span class="number">0</span>)<span class="comment">//消息为end则结束</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	msgctl(msgid,IPC_RMID,<span class="number">0</span>);<span class="comment">//删除消息队列</span></span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>sudo gcc sndfile.c -o sndfile</code>和<code>sudo gcc rcvfile.c -o rcvfile</code></p>
<p>执行<code>./sndfile</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121021919778.png"></p>
<p>执行<code>./rcvfile</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121022001974.png"></p>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim sndshm.c</span><br></pre></td></tr></table></figure>

<p>创建 sndshm.c 文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shmid;</span><br><span class="line">    <span class="keyword">char</span> *viraddr;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUFSIZ];</span><br><span class="line">    shmid = shmget(<span class="number">1234</span>, BUFSIZ, <span class="number">0666</span> | IPC_CREAT); <span class="comment">//创建共享内存</span></span><br><span class="line">    viraddr = (<span class="keyword">char</span>*)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//附接到共享内存</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Enter some text:&quot;</span>);           <span class="comment">//提示用户输入信息</span></span><br><span class="line">	fgets(buffer, BUFSIZ, <span class="built_in">stdin</span>);       <span class="comment">//将标准输入送入到缓冲区中</span></span><br><span class="line">	<span class="built_in">strcat</span>(viraddr, buffer);            <span class="comment">//采用追加方式写到共享内存</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buffer, <span class="string">&quot;end&quot;</span>, <span class="number">3</span>) == <span class="number">0</span>) <span class="comment">//当输入的字符为&quot;end&quot;时，终止循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    shmdt(viraddr); <span class="comment">//切断与共享内存的链接</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim rcvshm.c</span><br></pre></td></tr></table></figure>

<p>创建 rcvshm.c 文件，并在其中添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shmid;</span><br><span class="line">    <span class="keyword">char</span> *viraddr;</span><br><span class="line">    shmid = shmget(<span class="number">1234</span>, BUFSIZ, <span class="number">0666</span> | IPC_CREAT); <span class="comment">//创建共享内存</span></span><br><span class="line">    viraddr = (<span class="keyword">char</span> *)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);           <span class="comment">//附接到共享内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your message is ：%s&quot;</span>, viraddr);        <span class="comment">//输出共享内存的内容</span></span><br><span class="line">    shmdt(viraddr);                                 <span class="comment">//切断与共享内存的链接</span></span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="number">0</span>);<span class="comment">//释放共享内存</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行<code>sudo gcc sndshm.c -o sndshm</code>和<code>sudo gcc rcvshm.c -o rcvshm</code></p>
<p>执行<code>./sndshm</code>和<code>./rcvshm</code></p>
<p><img src="https://gitee.com/lnm011223/lnm011223-picture/raw/master/uPic/image-20211121023045174.png"></p>
<h3 id="代码实践-2："><a href="#代码实践-2：" class="headerlink" title="代码实践 2："></a>代码实践 2：</h3><blockquote>
<p>请对上述 IPC 方式的第四种——共享内存进行改写，实现以下 场景。 </p>
<ul>
<li>（1）创建两块共享内存 M1 和 M2；用数据结构“环形队列/数组”来抽象 M1 和 M2，也即，每个共享内存中的存储形式为一循环队列或数组，容量为 4096（可 以容纳 4096 个消息）； </li>
<li>（2）发送者进程，名为 A，向 M1 中“生产”常规信息（可以是字符串），从 M2 中“消费”控制信息；接收者进程，名为 B，向 M2“生产”控制信息，从 M1 中 “消费”常规信息；这里可以理解为：M1 为 A 向 B 发送数据的缓冲（Data Buffer）， M2 则为 B 向 A 发送应答（确认收到的应答）的缓冲（Response Buffer）； </li>
<li>（3）初始状态下，M1 和 M2 皆为空；A 首先主动向 B 发送常规信息，数量 为[1-10]中的随机数目（但是每次发送的数据量肯定不能超过 M1 中的空闲槽数 量）；发送之后，A 再向 B 传送信号（Signal），要其消费 M1； </li>
<li>（4）B 收到 A 发送来的信号后，从 M1 中消费信息，数量为[1-10]中的随机 数量（但是肯定不能超过 M1 中的当前存在消息数目）；B 向 M2 中生产应答信 息，数目为其最近消费 M1 的消息个数，即：B 一次消费的常规信息数，要等于 生产的应答信息数；之后，B 向 A 发送信号，让其接收应答信息； </li>
<li>（5）A 收到信号后，消费应答信息，并继续向 M1 中生产常规信息。</li>
</ul>
</blockquote>
<h2 id="3-3-心得和体会"><a href="#3-3-心得和体会" class="headerlink" title="3.3 心得和体会"></a>3.3 心得和体会</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>System Call</tag>
        <tag>IPC</tag>
      </tags>
  </entry>
</search>
